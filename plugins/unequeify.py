from pyrogram import Client, filters
from pyrogram.types import Message, CallbackQuery
from config import Config
from database import db
import time

@Client.on_message(filters.command("cleandup") & filters.private)
async def cleandup_start(client, message: Message):
    user_id = message.from_user.id
    await message.reply(
        "üîÅ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá **‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶´‡¶∞‡ßã‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡ßã**\n"
        "‡¶Ö‡¶•‡¶¨‡¶æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ @username / chat ID ‡¶™‡¶æ‡¶†‡¶æ‡¶ì ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá ‡¶ö‡¶æ‡¶ì‡•§"
    )
    await db.set_user_state(user_id, "awaiting_channel_input")

@Client.on_message(filters.private & filters.text)
async def handle_text_or_forward(client, message: Message):
    user_id = message.from_user.id
    state = await db.get_user_state(user_id)
    if state != "awaiting_channel_input":
        return

    await db.set_user_state(user_id, None)  # reset state
    chat_id = None

    # ‡¶´‡¶∞‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ID
    if message.forward_from_chat:
        chat_id = message.forward_from_chat.id
    else:
        # @username ‡¶¨‡¶æ -1001234567890
        try:
            text = message.text.strip()
            chat_id = int(text) if text.startswith("-100") else text
        except:
            return await message.reply("‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶¨‡¶æ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶®‡•§")

    # ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶æ‡¶∞ ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßã
    await clean_duplicates(client, message, user_id, chat_id)

async def clean_duplicates(client, message: Message, user_id: int, chat_id):
    userbot_data = await db.get_userbot(user_id)
    if not userbot_data:
        return await message.reply("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶¨‡¶ü ‡¶∏‡ßá‡¶∂‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø‡•§")

    await message.reply(f"üîç `{chat_id}` ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")

    userbot = Client(
        name=str(user_id),
        api_id=Config.API_ID,
        api_hash=Config.API_HASH,
        session_string=userbot_data['session']
    )

    await userbot.start()
    seen = set()
    dup_ids = []
    total = deleted = 0
    start_time = time.time()

    try:
        async for msg in userbot.get_chat_history(chat_id):
            if msg.video:
                total += 1
                uid = msg.video.file_unique_id
                if uid in seen:
                    dup_ids.append(msg.id)
                else:
                    seen.add(uid)

            if len(dup_ids) >= 100:
                await userbot.delete_messages(chat_id, dup_ids)
                deleted += len(dup_ids)
                dup_ids.clear()

                await message.reply(
                    f"üîÑ ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶® ‡¶ö‡¶≤‡¶õ‡ßá...\n"
                    f"‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶®: `{total}`\n"
                    f"‡¶°‡¶ø‡¶≤‡¶ø‡¶ü: `{deleted}`"
                )

        if dup_ids:
            await userbot.delete_messages(chat_id, dup_ids)
            deleted += len(dup_ids)

        duration = round(time.time() - start_time, 2)
        await message.reply(
            f"‚úÖ **‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶ï‡ßç‡¶≤‡¶ø‡¶® ‡¶∂‡ßá‡¶∑!**\n\n"
            f"‡¶Æ‡ßã‡¶ü ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶®: `{total}`\n"
            f"‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: `{deleted}` ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì\n"
            f"‡¶∏‡¶Æ‡ßü ‡¶≤‡ßá‡¶ó‡ßá‡¶õ‡ßá: `{duration} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°`"
        )
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:\n`{e}`")
    finally:
        await userbot.stop()