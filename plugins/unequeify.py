from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from config import Config
from database import db
import asyncio
import time

# ‚úÖ /cleandup ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
@Client.on_message(filters.command("cleandup"))
async def choose_channel(client, message: Message):
    user_id = message.from_user.id
    channels = await db.get_user_channels(user_id)

    btns = []
    if channels:
        for ch in channels:
            title = ch.get("title", "Channel")
            btns.append([InlineKeyboardButton(title, callback_data=f"udup_{ch['chat_id']}")])
    btns.append([InlineKeyboardButton("‚ûï ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤", callback_data="udup_custom")])
    btns.append([InlineKeyboardButton("‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="cancel_clean")])
    await message.reply(
        "‚úÖ ‡¶Ø‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá ‡¶ö‡¶æ‡¶®, ‡¶§‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶¶‡¶ø‡¶®:",
        reply_markup=InlineKeyboardMarkup(btns)
    )

# ‚úÖ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß
@Client.on_callback_query(filters.regex("udup_custom"))
async def ask_channel_info(client, cb: CallbackQuery):
    await cb.answer()
    await cb.message.edit(
        "üîÅ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶´‡¶∞‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® **‡¶Ö‡¶•‡¶¨‡¶æ** ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ @username / chat ID ‡¶¶‡¶ø‡¶®‡•§\n\n"
        "‡¶Ø‡ßá‡¶Æ‡¶®:\n`@yourchannel` ‡¶¨‡¶æ `-1001234567890`"
    )
    await db.set_user_state(cb.from_user.id, "awaiting_custom_channel")

# ‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
@Client.on_message(filters.text & filters.private)
async def handle_channel_input(client, message: Message):
    user_id = message.from_user.id
    state = await db.get_user_state(user_id)

    if state != "awaiting_custom_channel":
        return

    await db.set_user_state(user_id, None)  # reset state
    chat_id = None

    if message.forward_from_chat:
        chat_id = message.forward_from_chat.id
    else:
        try:
            chat_id = int(message.text.strip()) if message.text.strip().startswith("-100") else message.text.strip()
        except:
            return await message.reply("‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ID ‡¶¨‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶¶‡¶ø‡¶®‡•§")

    dummy_cb = type("Dummy", (object,), {
        "from_user": message.from_user,
        "message": message,
        "data": f"udup_{chat_id}",
        "answer": lambda *a, **kw: None
    })()

    await start_dup_cleaning(client, dummy_cb)

# ‚úÖ ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
@Client.on_callback_query(filters.regex(r"^udup_"))
async def start_dup_cleaning(client, cb: CallbackQuery):
    user_id = cb.from_user.id
    chat_id = cb.data.split("_", 1)[1]
    try:
        chat_id = int(chat_id) if chat_id.startswith("-") else chat_id
    except:
        return await cb.message.edit("‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ID/username‡•§")

    userbot_data = await db.get_userbot(user_id)
    if not userbot_data:
        return await cb.message.edit("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶¨‡¶ü ‡¶∏‡ßá‡¶∂‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø‡•§")

    userbot = Client(
        name=f"{user_id}",
        api_id=Config.API_ID,
        api_hash=Config.API_HASH,
        session_string=userbot_data['session']
    )

    await cb.message.edit(f"üîç `{chat_id}` ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")

    await userbot.start()
    seen = set()
    dup_ids = []
    total = deleted = 0
    start_time = time.time()

    try:
        async for msg in userbot.get_chat_history(chat_id):
            if msg.video:
                total += 1
                uid = msg.video.file_unique_id
                if uid in seen:
                    dup_ids.append(msg.id)
                else:
                    seen.add(uid)

            if len(dup_ids) >= 100:
                await userbot.delete_messages(chat_id, dup_ids)
                deleted += len(dup_ids)
                dup_ids.clear()

                await cb.message.edit(
                    f"üîÑ ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶® ‡¶ö‡¶≤‡¶õ‡ßá...\n"
                    f"‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶π‡ßü‡ßá‡¶õ‡ßá: `{total}`\n"
                    f"‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá: `{deleted}` ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü"
                )

        if dup_ids:
            await userbot.delete_messages(chat_id, dup_ids)
            deleted += len(dup_ids)

        duration = time.time() - start_time
        await cb.message.edit(
            f"‚úÖ **‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶ï‡ßç‡¶≤‡¶ø‡¶® ‡¶∂‡ßá‡¶∑!**\n\n"
            f"‡¶Æ‡ßã‡¶ü ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶®: `{total}`\n"
            f"‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá: `{deleted}`\n"
            f"‡¶∏‡¶Æ‡ßü ‡¶≤‡ßá‡¶ó‡ßá‡¶õ‡ßá: `{round(duration, 2)}s`"
        )
    except Exception as e:
        await cb.message.edit(f"‚ö†Ô∏è ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:\n`{e}`")
    finally:
        await userbot.stop()

# ‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
@Client.on_callback_query(filters.regex("cancel_clean"))
async def cancel_cb(client, cb: CallbackQuery):
    await cb.answer("‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá", show_alert=True)
    await cb.message.edit("‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶ï‡ßç‡¶≤‡¶ø‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")